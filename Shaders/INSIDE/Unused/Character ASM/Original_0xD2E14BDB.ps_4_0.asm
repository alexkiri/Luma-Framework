//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Sep 17 21:03:07 2025
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     z         1     NONE   float     z
// TEXCOORD                 6      w        1     NONE   float      w
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyz         3     NONE   float   xyz
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 5   xyzw        5     NONE   float   x  w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[27], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_constantbuffer cb2[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xw
dcl_output o0.xyzw
dcl_temps 6
div r0.xy, v2.xyxx, v2.wwww
sample r1.xyzw, r0.xyxx, t1.xyzw, s1
mad r0.xy, v4.xyxx, l(1.500000, 1.500000, 0.000000, 0.000000), r0.xyxx
sample_l r0.xyzw, r0.xyxx, t2.xyzw, s2, l(0.000000)
mad r0.x, cb1[7].z, r0.x, cb1[7].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.x, r0.x, -v2.z
add r0.x, |r0.x|, l(-0.250000)
mul_sat r0.x, r0.x, l(4.000000)
max r0.yzw, r1.xxyz, l(0.000000, 0.000977517106, 0.000977517106, 0.000977517106)
log r0.yzw, r0.yyzw
add r1.xy, -r0.wyww, -r0.zwzz
mul r1.xy, r1.xyxx, l(0.333333343, 0.333333343, 0.000000, 0.000000)
mad r1.xy, r0.yzyy, l(-0.666666687, -0.666666687, 0.000000, 0.000000), -r1.xyxx
max r1.z, |r1.y|, |r1.x|
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
min r1.w, |r1.y|, |r1.x|
mul r1.z, r1.z, r1.w
mul r1.w, r1.z, r1.z
mad r2.x, r1.w, l(0.0208350997), l(-0.085133)
mad r2.x, r1.w, r2.x, l(0.180141)
mad r2.x, r1.w, r2.x, l(-0.330299497)
mad r1.w, r1.w, r2.x, l(0.999866)
mul r2.x, r1.w, r1.z
mad r2.x, r2.x, l(-2.000000), l(1.57079637)
lt r2.y, |r1.y|, |r1.x|
and r2.x, r2.y, r2.x
mad r1.z, r1.z, r1.w, r2.x
lt r1.w, r1.y, -r1.y
and r1.w, r1.w, l(0xc0490fdb)
add r1.z, r1.w, r1.z
min r1.w, r1.y, r1.x
max r1.x, r1.y, r1.x
ge r1.x, r1.x, -r1.x
lt r1.y, r1.w, -r1.w
and r1.x, r1.x, r1.y
movc r1.x, r1.x, -r1.z, r1.z
mov_sat r1.yzw, -r0.yyzw
dp3 r0.y, -r0.yzwy, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
add r0.zw, r1.wwwy, r1.zzzw
mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.333333343, 0.333333343)
mad r0.zw, r1.yyyz, l(0.000000, 0.000000, 0.666666687, 0.666666687), -r0.zzzw
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r0.z, r0.z
lt r0.w, l(0.000000), r0.z
and r0.w, r1.x, r0.w
sincos r1.x, r2.x, r0.w
mov r1.y, r2.x
mad r0.w, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mad r1.z, r0.w, r0.x, l(1.000000)
mul r0.x, r0.x, r0.w
div r0.x, r0.x, v2.w
mad r0.y, r0.y, r1.z, cb0[15].z
lt r2.xyzw, v1.xyxy, l(0.750000, 0.500000, 0.500000, 0.500000)
and r2.xyzw, r2.xyzw, l(1, 1, 1, 1)
lt r3.xyzw, l(0.500000, 0.250000, 0.250000, 0.250000), v1.xyxy
and r3.xyzw, r3.xyzw, l(1, 1, 1, 1)
imul null, r2.xyzw, r2.xyzw, r3.xyzw
ine r2.xyzw, r2.xyzw, l(0, 0, 0, 0)
and r1.zw, r2.yyyw, r2.xxxz
movc r0.w, r1.z, cb0[15].y, cb0[15].x
add r0.y, -r0.w, r0.y
mad r0.w, r0.w, l(-2.000000), l(1.000000)
div_sat r0.y, r0.y, r0.w
mad r0.w, -r1.x, r0.z, r0.y
mad r2.xy, r1.xyxx, r0.zzzz, r0.yyyy
mad_sat r2.z, -r1.y, r0.z, r0.w
add r2.xyz, r2.xyzx, v3.xyzx
add r0.y, r0.y, l(-0.200000)
mul r0.y, r0.y, l(-5.000000)
max r0.y, r0.y, l(0.000000)
mov_sat r0.z, v1.w
sample r3.xyzw, v1.xyxx, t3.xyzw, s3
mad_sat r0.w, r3.x, cb0[26].x, cb0[26].y
mul r0.w, r0.z, r0.w
mul r1.xy, r0.wwww, cb0[26].zwzz
mad_sat r0.w, r3.w, cb0[24].x, cb0[24].y
mad_sat r2.w, r3.w, cb0[25].x, cb0[25].y
mul r3.xy, r2.wwww, cb0[25].zwzz
mul r0.z, r0.z, r0.w
mul r0.zw, r0.zzzz, cb0[24].zzzw
max r0.z, r0.z, r1.x
add r0.z, -r0.z, l(1.000000)
movc r0.z, r1.w, l(1.000000), r0.z
movc r1.xzw, r1.zzzz, l(4.000000,0,4.000000,1.000000), l(8.000000,0,12.000000,2.000000)
sample r4.xyzw, v1.xyxx, t0.xyzw, s0
mul r5.xyz, r0.zzzz, r4.xyzx
mad r4.xyz, -r4.xyzx, r0.zzzz, l(0.400000, 0.300000, 0.300000, 0.000000)
mad r3.xzw, r3.xxxx, r4.xxyz, r5.xxyz
max r0.z, r3.y, r0.w
mul r0.yw, r0.yyyw, l(0.000000, 0.600000, 0.000000, 2.500000)
mul r2.w, r3.y, l(1.250000)
max r0.w, r0.w, r2.w
max r0.z, r1.y, r0.z
mul r1.y, r1.y, l(3.33333325)
max r0.w, r0.w, r1.y
add r0.w, -r0.w, l(1.000000)
log r1.y, v5.x
mul r1.x, r1.y, r1.x
exp r1.x, r1.x
mul r0.z, r0.z, r1.x
mul r4.xyz, r0.zzzz, cb0[16].xyzx
add r4.xyz, r4.xyzx, r4.xyzx
mad r2.xyz, r2.xyzx, r3.xzwx, r4.xyzx
mul r0.x, r0.x, r1.z
mov_sat r0.z, v4.z
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r0.z
mul r1.x, r0.z, r0.z
mul r1.x, r1.x, v5.w
mul r1.y, r1.w, r1.x
mad r0.x, r0.x, r0.z, r1.y
lt r1.yz, v1.xxyx, l(0.000000, 0.500000, 0.250000, 0.000000)
and r0.z, r1.z, r1.y
lt r1.yz, l(0.000000, 0.250000, 0.000000, 0.000000), v1.xxyx
and r1.y, r1.z, r1.y
and r0.z, r0.z, r1.y
and r0.z, r0.z, l(0x3f800000)
mad r0.x, r1.x, r0.z, r0.x
mul r1.xyz, v3.xyzx, cb0[16].xyzx
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.xzw, r0.xxxx, r1.xxyz, r2.xxyz
mul r1.xyz, r0.xzwx, cb0[3].xyzx
add r1.xz, r1.yyzy, r1.xxxx
mul r1.y, r1.z, r1.y
mad r1.x, r0.w, cb0[3].z, r1.x
sqrt r1.y, r1.y
dp2 r1.y, cb0[3].wwww, r1.yyyy
add r1.x, r1.y, r1.x
add r1.xyz, -r0.xzwx, r1.xxxx
mad r0.xyz, r0.yyyy, r1.xyzx, r0.xzwx
mad r0.xyz, r0.xyzx, cb0[17].xyzx, -cb2[0].xyzx
add r0.w, -cb2[0].w, l(1.000000)
max r0.w, r0.w, v1.z
min r0.w, r0.w, l(1.000000)
mad o0.xyz, r0.wwww, r0.xyzx, cb2[0].xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used
