#pragma once

#include <unordered_set>

#include "..\..\External\WDK\includes\d3d11TokenizedProgramFormat.hpp"

namespace ShaderPatching
{
   std::unordered_set<D3D10_SB_OPCODE_TYPE> opcodes_dcl = {
      D3D10_SB_OPCODE_DCL_RESOURCE,
      D3D10_SB_OPCODE_DCL_CONSTANT_BUFFER,
      D3D10_SB_OPCODE_DCL_SAMPLER,
      D3D10_SB_OPCODE_DCL_INDEX_RANGE,
      D3D10_SB_OPCODE_DCL_GS_OUTPUT_PRIMITIVE_TOPOLOGY,
      D3D10_SB_OPCODE_DCL_GS_INPUT_PRIMITIVE,
      D3D10_SB_OPCODE_DCL_MAX_OUTPUT_VERTEX_COUNT,
      D3D10_SB_OPCODE_DCL_INPUT,
      D3D10_SB_OPCODE_DCL_INPUT_SGV,
      D3D10_SB_OPCODE_DCL_INPUT_SIV,
      D3D10_SB_OPCODE_DCL_INPUT_PS,
      D3D10_SB_OPCODE_DCL_INPUT_PS_SGV,
      D3D10_SB_OPCODE_DCL_INPUT_PS_SIV,
      D3D10_SB_OPCODE_DCL_OUTPUT,
      D3D10_SB_OPCODE_DCL_OUTPUT_SGV,
      D3D10_SB_OPCODE_DCL_OUTPUT_SIV,
      D3D10_SB_OPCODE_DCL_TEMPS,
      D3D10_SB_OPCODE_DCL_INDEXABLE_TEMP,
      D3D10_SB_OPCODE_DCL_GLOBAL_FLAGS,
      D3D11_SB_OPCODE_DCL_STREAM,
      D3D11_SB_OPCODE_DCL_FUNCTION_BODY,
      D3D11_SB_OPCODE_DCL_FUNCTION_TABLE,
      D3D11_SB_OPCODE_DCL_INTERFACE,
      D3D11_SB_OPCODE_DCL_INPUT_CONTROL_POINT_COUNT,
      D3D11_SB_OPCODE_DCL_OUTPUT_CONTROL_POINT_COUNT,
      D3D11_SB_OPCODE_DCL_TESS_DOMAIN,
      D3D11_SB_OPCODE_DCL_TESS_PARTITIONING,
      D3D11_SB_OPCODE_DCL_TESS_OUTPUT_PRIMITIVE,
      D3D11_SB_OPCODE_DCL_HS_MAX_TESSFACTOR,
      D3D11_SB_OPCODE_DCL_HS_FORK_PHASE_INSTANCE_COUNT,
      D3D11_SB_OPCODE_DCL_HS_JOIN_PHASE_INSTANCE_COUNT,
      D3D11_SB_OPCODE_DCL_THREAD_GROUP,
      D3D11_SB_OPCODE_DCL_UNORDERED_ACCESS_VIEW_TYPED,
      D3D11_SB_OPCODE_DCL_UNORDERED_ACCESS_VIEW_RAW,
      D3D11_SB_OPCODE_DCL_UNORDERED_ACCESS_VIEW_STRUCTURED,
      D3D11_SB_OPCODE_DCL_THREAD_GROUP_SHARED_MEMORY_RAW,
      D3D11_SB_OPCODE_DCL_THREAD_GROUP_SHARED_MEMORY_STRUCTURED,
      D3D11_SB_OPCODE_DCL_RESOURCE_RAW,
      D3D11_SB_OPCODE_DCL_RESOURCE_STRUCTURED,
      D3D11_SB_OPCODE_DCL_GS_INSTANCE_COUNT,
   };

   // TODO: only does 1 channel w at the moment, make generic and evolve into a function to construct any instruction. Same for the other function.
   std::vector<uint32_t> GetMovInstruction(D3D10_SB_OPERAND_TYPE output_type, uint32_t output_index, D3D10_SB_OPERAND_TYPE input_type, uint32_t input_index, bool saturate = false)
   {
      uint32_t opcode_token =
         ENCODE_D3D10_SB_OPCODE_TYPE(D3D10_SB_OPCODE_MOV) |
         ENCODE_D3D10_SB_TOKENIZED_INSTRUCTION_LENGTH(5) |
         ENCODE_D3D10_SB_INSTRUCTION_SATURATE(saturate);
      // Dest0 operand: o0.w (mask W)
      uint32_t dest_0_operand_token =
         ENCODE_D3D10_SB_OPERAND_NUM_COMPONENTS(D3D10_SB_OPERAND_4_COMPONENT) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_SELECTION_MODE(D3D10_SB_OPERAND_4_COMPONENT_MASK_MODE) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_MASK(D3D10_SB_OPERAND_4_COMPONENT_MASK_W) |
         ENCODE_D3D10_SB_OPERAND_TYPE(output_type) |
         ENCODE_D3D10_SB_OPERAND_INDEX_DIMENSION(D3D10_SB_OPERAND_INDEX_1D) |
         ENCODE_D3D10_SB_OPERAND_INDEX_REPRESENTATION(0, D3D10_SB_OPERAND_INDEX_IMMEDIATE32);
      // Src0 operand: o0.w (select_1 W)
      uint32_t src_0_operand_token =
         ENCODE_D3D10_SB_OPERAND_NUM_COMPONENTS(D3D10_SB_OPERAND_4_COMPONENT) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_SELECTION_MODE(D3D10_SB_OPERAND_4_COMPONENT_SELECT_1_MODE) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_SELECT_1(D3D10_SB_4_COMPONENT_W) |
         ENCODE_D3D10_SB_OPERAND_TYPE(input_type) |
         ENCODE_D3D10_SB_OPERAND_INDEX_DIMENSION(D3D10_SB_OPERAND_INDEX_1D) |
         ENCODE_D3D10_SB_OPERAND_INDEX_REPRESENTATION(0, D3D10_SB_OPERAND_INDEX_IMMEDIATE32);

      return std::vector<uint32_t>{
            opcode_token,
            dest_0_operand_token, output_index,
            src_0_operand_token,  input_index
      };
   }

   std::vector<uint32_t> GetMaxInstruction(D3D10_SB_OPERAND_TYPE output_type, uint32_t output_index, D3D10_SB_OPERAND_TYPE input_type, uint32_t input_index)
   {
      uint32_t opcode_token =
         ENCODE_D3D10_SB_OPCODE_TYPE(D3D10_SB_OPCODE_MAX) |
         ENCODE_D3D10_SB_TOKENIZED_INSTRUCTION_LENGTH(10);
      // Dest0 operand: o0.rgb (mask XYZ)
      uint32_t dest_0_operand_token =
         ENCODE_D3D10_SB_OPERAND_NUM_COMPONENTS(D3D10_SB_OPERAND_4_COMPONENT) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_SELECTION_MODE(D3D10_SB_OPERAND_4_COMPONENT_MASK_MODE) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_MASK(D3D10_SB_OPERAND_4_COMPONENT_MASK_X) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_MASK(D3D10_SB_OPERAND_4_COMPONENT_MASK_Y) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_MASK(D3D10_SB_OPERAND_4_COMPONENT_MASK_Z) |
         ENCODE_D3D10_SB_OPERAND_TYPE(output_type) |
         ENCODE_D3D10_SB_OPERAND_INDEX_DIMENSION(D3D10_SB_OPERAND_INDEX_1D) |
         ENCODE_D3D10_SB_OPERAND_INDEX_REPRESENTATION(0, D3D10_SB_OPERAND_INDEX_IMMEDIATE32);
      // Src0 operand: o0.rgb (mask XYZ)
      uint32_t src_0_operand_token =
         ENCODE_D3D10_SB_OPERAND_NUM_COMPONENTS(D3D10_SB_OPERAND_4_COMPONENT) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_SELECTION_MODE(D3D10_SB_OPERAND_4_COMPONENT_MASK_MODE) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_MASK(D3D10_SB_OPERAND_4_COMPONENT_MASK_X) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_MASK(D3D10_SB_OPERAND_4_COMPONENT_MASK_Y) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_MASK(D3D10_SB_OPERAND_4_COMPONENT_MASK_Z) |
         ENCODE_D3D10_SB_OPERAND_TYPE(output_type) |
         ENCODE_D3D10_SB_OPERAND_INDEX_DIMENSION(D3D10_SB_OPERAND_INDEX_1D) |
         ENCODE_D3D10_SB_OPERAND_INDEX_REPRESENTATION(0, D3D10_SB_OPERAND_INDEX_IMMEDIATE32);
      // Src1 operand: l(0, 0, 0, 0)
      uint32_t src_1_operand_token =
         ENCODE_D3D10_SB_OPERAND_NUM_COMPONENTS(D3D10_SB_OPERAND_4_COMPONENT) |
         ENCODE_D3D10_SB_OPERAND_4_COMPONENT_SELECTION_MODE(D3D10_SB_OPERAND_4_COMPONENT_MASK_MODE) |
         ENCODE_D3D10_SB_OPERAND_TYPE(D3D10_SB_OPERAND_TYPE_IMMEDIATE32);
      // Constant 0 for all components
      std::array<float, 4> src_1_immediates = {0.f, 0.f, 0.f, 0.f};

      return std::vector<uint32_t>{
            opcode_token,
            dest_0_operand_token, output_index,
            src_0_operand_token,  input_index,
            src_1_operand_token,  Math::AsUInt(src_1_immediates[0]),  Math::AsUInt(src_1_immediates[1]),  Math::AsUInt(src_1_immediates[2]),  Math::AsUInt(src_1_immediates[3])
      };
   }
}